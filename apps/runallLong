#!/usr/bin/python
#
# run all tests
#

import os
import sys
import signal
import time
import subprocess

# nibble = 0, byte = 1, rle = 2, streamvbyte = 3, streamcase = 4, bitpacking = 5, varint-GB = 6
compression_num = 5;	

def signal_handler(signal,frame):
  print "bye\n"
  sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)

def shellGetOutput(str) :
  process = subprocess.Popen(str,shell=True,stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
  output, err = process.communicate()
  
  if (len(err) > 0):
      raise NameError(str+"\n"+output+err)
  return output

dataDir = "../../inputs/"
bdataDir = "~/data/scratch/jshun/"
applications = ["BFS", "BC", "Radii", "Components"]
wapplications = ["BellmanFord"]
rapplications = ["PageRank"]

# this file runs tests on the graphs that must be compiled with the -DLONG flag

btestfiles = [("uk-union-2006-06-2007-05_J","100"),("uk-union-2006-06-2007-05_J_reordered","100")]

compression = [(".nibble"), (".byte"), (".rle"), (".streamvbyte"), (".streamcase"), (".bp"), (".varintgb")]
processors = [32]
#processors = [1,2,4,8]
#processors = [1,2,4]+range(8,80+1,8)
#processors = [1]+range(40,81,8)

debug = 0
if debug:
  processors = [80]
  wtestfiles = [("cit-Patents.txt_WJ_psep_ordered","3000000")]
  testfiles = [("cit-Patents.txt_J_psep_ordered","3000000")]

for testfile in btestfiles :
	for p in processors :
		if p==1:
			css = "export CILK_NWORKERS=1; ./decoderSpeed -c -rounds 5"+dataDir+testfile[0]+compression[compression_num]
		else:
			css = "export CILK_NWORKERS="+`p`+"; numactl -i all ./decoderSpeed -c  -rounds 5"+' '+dataDir+testfile[0]+compression[compression_num]
		print "decoderSpeed"+" "+`p`+" "+testfile[0]+" Ligra+"
		print shellGetOutput(css)
		sys.stdout.flush()


for app in applications:
  for testfile in btestfiles :
     for p in processors :
	if p == 1:
		css = "export CILK_NWORKERS=1; ./"+app+' -c -rounds 5 -r '+testfile[1]+' '+dataDir+testfile[0]+compression[compression_num]
	else:
		css ="export CILK_NWORKERS="+`p`+"; numactl -i all ./" +app+' -rounds 5 -c -r '+testfile[1]+ ' '+dataDir+testfile[0]+compression[compression_num]
      	print app+" "+`p` + " " + testfile[0] + " Ligra+" 
      	print shellGetOutput(css)
      	sys.stdout.flush()

for app in rapplications:
  for testfile in btestfiles :
     for p in processors :
	if p == 1:
		css = "export CILK_NWORKERS=1; ./"+app+' -c -rounds 5 -maxiters 1 -r '+testfile[1]+' '+dataDir+testfile[0]+compression[compression_num]
	else:
		css ="export CILK_NWORKERS="+`p`+"; numactl -i all ./" +app+' -c -rounds 5 -maxiters 1 -r '+testfile[1]+ ' '+dataDir+testfile[0]+compression[compression_num]
      	print app+" "+`p` + " " + testfile[0] + " Ligra+" 
      	print shellGetOutput(css)
      	sys.stdout.flush()
# for app in wapplications:
#   for p in processors :
#     if p == 1:
#       ss = "CILK_NWORKERS="+`p`+" ./" + app + " -rounds 1 -r 1 data/twitter_WJ"
#     else:
#       ss = "CILK_NWORKERS="+`p`+" numactl -i all ./" + app + " -r 1 data/twitter_WJ"
#     print app+" "+`p` + " twitter"
#     print shellGetOutput(ss)
#     sys.stdout.flush()
